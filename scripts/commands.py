"""
–ú–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–û—Å–Ω–æ–≤–Ω–æ–π Flow:
1. dev() -> –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
   - start_infrastructure() -> –ó–∞–ø—É—Å–∫ –≤—Å–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     - load_env_vars() -> –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ is_port_free()
     - –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker daemon
     - run_compose_command("down") -> –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
     - get_available_port() -> –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
     - run_compose_command("up -d") -> –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
     - check_services() -> –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
     - migrate() -> –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î
   - find_free_port() -> –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–∞ –¥–ª—è FastAPI
   - uvicorn.run() -> –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- serve() -> –¢–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- start_all() -> migrate() + serve()
- setup()/activate() -> –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç—ã

–£—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:
- create_database() -> –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
- get_postgres_container_name() -> –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL
"""
import os
import subprocess
from pathlib import Path
from typing import Optional
import time
import socket
import platform
import threading
import sys
import asyncio
import uvicorn
import asyncpg

class DockerDaemonNotRunningError(Exception):
    """
    –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤–æ–∑–Ω–∏–∫–∞—é—â–µ–µ –∫–æ–≥–¥–∞ Docker –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
    """
    def __init__(self, message=None):
        self.message = message or "Docker –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ Docker Desktop –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç."
        super().__init__(self.message)


class DockerContainerConflictError(Exception):
    """
    –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤–æ–∑–Ω–∏–∫–∞—é—â–µ–µ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –∏–º–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker.
    """
    def __init__(self, container_name=None, message=None):
        if container_name:
            self.message = message or f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '{container_name}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –£–¥–∞–ª–∏ –µ–≥–æ –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π."
        else:
            self.message = message or "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –£–¥–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π –µ–≥–æ."
        super().__init__(self.message)

TEST_ENV_FILE = ".env.test"
DEV_ENV_FILE=".env.dev"
# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
ROOT_DIR = Path(__file__).parents[1]

COMPOSE_FILE_WITHOUT_BACKEND = "docker-compose.dev.yml"

DEFAULT_PORTS = {
    'FASTAPI': 8000,
    'RABBITMQ': 5672,      # –ü–æ—Ä—Ç –¥–ª—è AMQP
    'RABBITMQ_UI': 15672,  # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    'POSTGRES': 5432,
    'REDIS': 6379,
    'PGADMIN': 5050,
    'REDIS_COMMANDER': 8081,
}

def load_env_vars(env_file_path: str = None) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    Args:
        env_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    if env_file_path is None:
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º .env.test, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ .env.dev
        dev_env_path = ROOT_DIR / DEV_ENV_FILE
        test_env_path = ROOT_DIR / TEST_ENV_FILE


        if dev_env_path.exists():
            env_file_path = str(dev_env_path)
            print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º dev –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {DEV_ENV_FILE}")
        elif test_env_path.exists():
            env_file_path = str(test_env_path)
            print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {TEST_ENV_FILE}")
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.env.dev –∏–ª–∏ .env.test)")
            return {}

    env_vars = {}
    if os.path.exists(env_file_path):
        with open(env_file_path, encoding="utf-8") as f:
            for line in f:
                if line.strip() and not line.startswith('#'):
                    try:
                        key, value = line.strip().split('=', 1)
                        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                        value = value.strip('"\'')
                        env_vars[key] = value
                    except ValueError:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                        pass
    else:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file_path}")

    return env_vars

def run_compose_command(command: str | list, compose_file: str = COMPOSE_FILE_WITHOUT_BACKEND, env: dict = None) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç docker-compose –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞

    Args:
        command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è docker-compose
        compose_file: –ü—É—Ç—å –∫ docker-compose —Ñ–∞–π–ª—É. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è COMPOSE_FILE_WITHOUT_BACKEND –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        env: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è docker-compose. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DEV_ENV_FILE –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç

    Returns:
        None

    Raises:
        DockerDaemonNotRunningError: –ï—Å–ª–∏ –¥–µ–º–æ–Ω Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω
        DockerContainerConflictError: –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª .env.dev –∏–ª–∏ docker-compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    if isinstance(command, str):
        command = command.split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ docker-compose
    compose_path = os.path.join(ROOT_DIR, compose_file)
    if not os.path.exists(compose_path):
        print(f"‚ùå –§–∞–π–ª {compose_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {ROOT_DIR}")
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª {compose_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {ROOT_DIR}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env.dev
    env_path = os.path.join(ROOT_DIR, DEV_ENV_FILE)
    if not os.path.exists(env_path):
        print(f"‚ùå –§–∞–π–ª {DEV_ENV_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {ROOT_DIR}")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.dev —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª {DEV_ENV_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    environment = os.environ.copy()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ DEV_ENV_FILE
    environment.update(load_env_vars())
    if env:
        environment.update(env)

    # show_output = any(cmd in command for cmd in ['up', 'build'])

    try:
        subprocess.run(
            ["docker-compose", "-f", compose_file] + command,
            cwd=ROOT_DIR,
            check=True,
            env=environment,
            # capture_output=not show_output,
            text=True
        )
    except subprocess.CalledProcessError as e:
        error_output = e.stderr or e.stdout or str(e)
        if "docker daemon is not running" in error_output or "pipe/docker_engine" in error_output:
            raise DockerDaemonNotRunningError() from e
        elif "Conflict" in error_output and "is already in use by container" in error_output:
            import re
            container_match = re.search(r'The container name "([^"]+)"', error_output)
            container_name = container_match.group(1) if container_match else None
            raise DockerContainerConflictError(container_name) from e
        raise

def find_free_port(start_port: int = 8000) -> int:
    """
    –ò—â–µ—Ç –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –≤ dev —Ä–µ–∂–∏–º–µ.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å bind –Ω–∞ –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ socket.

    Args:
        start_port: –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞

    Returns:
        int: –ù–æ–º–µ—Ä —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞

    Raises:
        RuntimeError: –ï—Å–ª–∏ –≤—Å–µ –ø–æ—Ä—Ç—ã –¥–æ 65535 –∑–∞–Ω—è—Ç—ã
    """
    port = start_port
    while port < 65535:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('', port))
                return port
        except OSError:
            port += 1
    raise RuntimeError("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤! –ê—Ö—É–µ—Ç—å!")

def get_available_port(default_port: int) -> int:
    """
    –ê–Ω–∞–ª–æ–≥ find_free_port –Ω–æ —Å –¥—Ä—É–≥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.

    –î—É–±–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É find_free_port. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    –ø–æ—Ä—Ç–æ–≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ start_infrastructure.

    Args:
        default_port: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ—Ä—Ç

    Returns:
        int: –°–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç

    Raises:
        RuntimeError: –° —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –≤ –æ—à–∏–±–∫–µ
    """
    port = default_port
    while port < 65535:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('', port))
                return port
        except OSError:
            port += 1
    raise RuntimeError(f"–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –ø–æ—Å–ª–µ {default_port}")

def is_port_free(port: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Ä—Ç–æ–≤ –∏–∑ .env.dev –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

    Args:
        port: –ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω, False –µ—Å–ª–∏ –∑–∞–Ω—è—Ç
    """
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('', port))
            return True
    except OSError:
        return False

def get_port(service: str) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π.

    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    –∏ –∏—â–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ. Fallback –Ω–∞ DEFAULT_PORTS.

    Args:
        service: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'REDIS_PORT')

    Returns:
        int: –ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞

    Note:
        –£–±–∏—Ä–∞–µ—Ç '_PORT' –∏–∑ –∏–º–µ–Ω–∏ –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    """
    service_upper = service.upper().replace('_PORT', '')
    return int(os.getenv(service, DEFAULT_PORTS[service_upper]))

def show_loader(message: str, stop_event: threading.Event):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π loader

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        stop_event: –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    """
    chars = "‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
    i = 0
    while not stop_event.is_set():
        sys.stdout.write(f'\r{chars[i % len(chars)]} {message}')
        sys.stdout.flush()
        time.sleep(0.1)
        i += 1
    sys.stdout.write('\r' + ' ' * (len(message) + 2) + '\r')
    sys.stdout.flush()

def check_service(name: str, port: int, retries: int = 10, delay: int = 3) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.

    –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—Å–ª–µ
    –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –î–µ–ª–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.

    Args:
        name: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        port: –ü–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        retries: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç, False –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    for _ in range(retries):
        try:
            sock.connect(('localhost', port))
            sock.close()
            return True
        except:
            print(f"‚è≥ –ñ–¥—ë–º {name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            time.sleep(delay)
    return False

def check_services():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.

    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ docker-compose up –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π
    –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis, RabbitMQ –∏ PostgreSQL. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç
    —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.

    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã, False –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ

    Note:
        PostgreSQL –ø–æ–ª—É—á–∞–µ—Ç 30 –ø–æ–ø—ã—Ç–æ–∫, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ 5
    """
    services_config = {
        'Redis': ('REDIS_PORT', 5),
        'RabbitMQ': ('RABBITMQ_UI_PORT', 20),
        'PostgreSQL': ('POSTGRES_PORT', 30),
    }

    for service_name, (port_key, retries) in services_config.items():
        # –ë–µ—Ä–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã–µ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—ã—à–µ)
        port = int(os.environ.get(port_key, get_port(port_key)))
        if not check_service(service_name, port, retries):
            print(f"‚ùå {service_name} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}!")
            return False
    return True

def get_postgres_container_name() -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL –∏–ª–∏ fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.

    –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–µ—Ä–µ–∑ docker ps —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∏–º–µ–Ω–∏.
    –ï—Å–ª–∏ Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "postgres"
    –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î.

    Returns:
        str: –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL –∏–ª–∏ "postgres" –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    Note:
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ create_database() –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Docker
        which_result = subprocess.run(
            ["which", "docker"],
            capture_output=True,
            text=True
        )
        if which_result.returncode != 0:
            print("‚ÑπÔ∏è Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
            return "postgres"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

        result = subprocess.run(
            ["docker", "ps", "--filter", "name=postgres", "--format", "{{.Names}}"],
            capture_output=True,
            text=True,
            check=True
        )
        containers = [name for name in result.stdout.strip().split('\n') if name]
        if not containers:
            print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Docker, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            return "postgres"
        return containers[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL —á–µ—Ä–µ–∑ Docker: {e}")
        return "postgres"
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "postgres"

def get_postgres_real_port() -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.

    Returns:
        int: –í–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç PostgreSQL –∏–ª–∏ 5432 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        postgres_container = get_postgres_container_name()
        if postgres_container == "postgres":
            return 5432

        result = subprocess.run(
            ["docker", "port", postgres_container, "5432"],
            capture_output=True,
            text=True,
            check=True
        )

        # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: 0.0.0.0:5432
        if result.stdout.strip():
            port_line = result.stdout.strip()
            external_port = port_line.split(':')[-1]
            return int(external_port)

        return 5432
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç PostgreSQL: {e}")
        return 5432

def create_database():
    """
    –°–æ–∑–¥–∞—ë—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
    1. –ß–µ—Ä–µ–∑ Docker exec –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL
    2. –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ psql (–µ—Å–ª–∏ Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)

    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.dev, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
    —á–µ—Ä–µ–∑ SQL –∑–∞–ø—Ä–æ—Å, —Å–æ–∑–¥–∞—ë—Ç –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.

    Returns:
        bool: True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ

    Note:
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PGPASSWORD –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–æ–ª—è –≤ psql
    """
    print("üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    db_config = load_env_vars()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    postgres_container = get_postgres_container_name()
    print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL: {postgres_container}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
    user = db_config.get('POSTGRES_USER', 'postgres')
    password = db_config.get('POSTGRES_PASSWORD', '')
    host = db_config.get('POSTGRES_HOST', 'localhost')
    port = db_config.get('POSTGRES_PORT', '5432')
    db_name = db_config.get('POSTGRES_DB', 'tarotbot_db')

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Docker
        which_docker = subprocess.run(["which", "docker"], capture_output=True)
        docker_available = which_docker.returncode == 0

        if docker_available:
            # –ú–µ—Ç–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docker
            check_db_inside = subprocess.run(
                ["docker", "exec", "-i", postgres_container, "psql", "-U", user, "-c",
                f"SELECT 1 FROM pg_database WHERE datname = '{db_name}';"],
                capture_output=True, text=True
            )

            if "1 row" not in check_db_inside.stdout:
                print(f"üõ†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —Å–æ–∑–¥–∞—ë–º...")
                create_cmd = [
                    "docker", "exec", "-i", postgres_container, "psql", "-U", user, "-c",
                    f"CREATE DATABASE {db_name};"
                ]
                subprocess.run(create_cmd, check=True)
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å–æ–∑–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!")
            else:
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!")
        else:
            # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ psql
            print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ psql...")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î
            psql_command = f"psql -U {user} -h {host} -p {port}"
            if password:
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PGPASSWORD –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–æ–ª—è
                env = os.environ.copy()
                env["PGPASSWORD"] = password
            else:
                env = os.environ.copy()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
            check_db = subprocess.run(
                f"{psql_command} -c \"SELECT 1 FROM pg_database WHERE datname = '{db_name}';\"",
                shell=True, env=env, capture_output=True, text=True
            )

            if "1 row" not in check_db.stdout:
                print(f"üõ†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º...")
                create_cmd = f"{psql_command} -c \"CREATE DATABASE {db_name};\""
                subprocess.run(create_cmd, shell=True, env=env, check=True)
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å–æ–∑–¥–∞–Ω–∞!")
            else:
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        dsn = f"postgresql://{user}:*******@{host}:{port}/{db_name}"
        print(f"üîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î: {dsn} (–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç)")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def start_infrastructure():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

    –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ –∏–∑ .env.dev
    2. –í–∞–ª–∏–¥–∞—Ü–∏—è Docker daemon
    3. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (down --remove-orphans)
    4. –û—á–∏—Å—Ç–∫–∞ volumes
    5. –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    6. –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏
    7. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    8. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î
    9. –í—ã–≤–æ–¥ –∞–¥—Ä–µ—Å–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤

    Returns:
        bool: True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ, False –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

    Raises:
        DockerDaemonNotRunningError: –ü—Ä–æ–±–ª–µ–º—ã —Å Docker
        DockerContainerConflictError: –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    """
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É...")

    env_vars = load_env_vars()

    busy_ports = []
    # –ò—Å–∫–ª—é—á–∞–µ–º FASTAPI –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ–Ω —Å–∞–º –Ω–∞–π–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
    infrastructure_ports = {k: v for k, v in DEFAULT_PORTS.items() if k != 'FASTAPI' and k != 'POSTGRES'}

    for service, default_port in infrastructure_ports.items():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ .env.dev –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        port = int(env_vars.get(f"{service}_PORT", default_port))
        if not is_port_free(port):
            busy_ports.append(f"{service}: {port}")

    if busy_ports:
        print("‚ùå –°–ª–µ–¥—É—é—â–∏–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã:")
        for port_info in busy_ports:
            print(f"   - {port_info}")
        print("üí° –û—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —ç—Ç–∏—Ö –ø–æ—Ä—Ç–∞—Ö –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –ø–æ—Ä—Ç—ã –≤ .env.dev")
        return False

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker
        try:
            docker_info = subprocess.run(
                ["docker", "info"],
                capture_output=True,
                text=True,
                check=True
            )
            print("‚úÖ Docker –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except subprocess.CalledProcessError as e:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Docker:")
            if "permission denied" in str(e.stderr).lower():
                print("üí° –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Docker. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            elif "cannot connect to the docker daemon" in str(e.stderr).lower():
                print("üí° Docker Daemon –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ:")
                print("   1. Docker Desktop —Ç–æ—á–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                print("   2. –°–ª—É–∂–±–∞ Docker Engine —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print("   3. –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å WSL –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–ª—É–∂–±–∞–º–∏")
            raise DockerDaemonNotRunningError()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")
        ps_result = subprocess.run(
            ["docker", "ps", "--format", "{{.Names}}"],
            capture_output=True,
            text=True,
            check=True
        )
        if ps_result.stdout.strip():
            print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:")
            for container in ps_result.stdout.strip().split('\n'):
                print(f"   - {container}")

        # –£–±–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        try:
            run_compose_command("down --remove-orphans")
        except subprocess.CalledProcessError as e:
            error_output = str(e)
            if "docker daemon is not running" in error_output or "pipe/docker_engine" in error_output:
                raise DockerDaemonNotRunningError()
            raise

        # –û—á–∏—â–∞–µ–º —Ç–æ–º–∞
        try:
            subprocess.run(["docker", "volume", "prune", "-f"], check=True)
        except subprocess.CalledProcessError as e:
            error_output = str(e)
            if "docker daemon is not running" in error_output or "pipe/docker_engine" in error_output:
                raise DockerDaemonNotRunningError()
            raise

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—ã –∏–∑ .env.dev –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        ports = {}
        for service, default_port in DEFAULT_PORTS.items():
            if service == 'POSTGRES':
                # –î–ª—è PostgreSQL –±–µ—Ä–µ–º –ø–æ—Ä—Ç –∏–∑ .env.dev
                postgres_port = int(env_vars.get('POSTGRES_PORT', default_port))
                if not is_port_free(postgres_port):
                    print(f"‚ùå –ü–æ—Ä—Ç {postgres_port} –¥–ª—è PostgreSQL –∑–∞–Ω—è—Ç!")
                    print(f"üí° –û—Å–≤–æ–±–æ–¥–∏ –ø–æ—Ä—Ç {postgres_port} –∏–ª–∏ –∏–∑–º–µ–Ω–∏ POSTGRES_PORT –≤ .env.dev")
                    return False
                ports[service] = postgres_port
            else:
                ports[service] = get_available_port(default_port)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç—ã –≤ docker-compose —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_for_compose = {
            f"{service}_PORT": str(port)
            for service, port in ports.items()
        }

        # –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        # —á—Ç–æ–±—ã alembic –∏ settings –≤–∏–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã
        os.environ.update(env_for_compose)

        print(f"üîç –ü–æ—Ä—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
        for service, port in ports.items():
            print(f"   {service}: {port}")

        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å loader
        stop_loader = threading.Event()
        loader_thread = threading.Thread(target=show_loader, args=("", stop_loader))
        loader_thread.start()

        try:
            run_compose_command(["up", "-d"], COMPOSE_FILE_WITHOUT_BACKEND, env=env_for_compose)
        except subprocess.CalledProcessError as e:
            error_output = str(e)
            if "docker daemon is not running" in error_output or "pipe/docker_engine" in error_output:
                raise DockerDaemonNotRunningError()
            elif "Conflict" in error_output and "is already in use by container" in error_output:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                import re
                container_match = re.search(r'The container name "([^"]+)"', error_output)
                container_name = container_match.group(1) if container_match else None
                raise DockerContainerConflictError(container_name)
            raise
        finally:
            stop_loader.set()
            loader_thread.join()
            print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!")

        # –ñ–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        check_services()
        # –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        debug_env_vars()
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–Ω—è—Ç–∏—è PostgreSQL
        create_database()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–Ω—è—Ç–∏—è PostgreSQL
        test_db_connection()

        print("üì¶ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
        migrate()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")

        print("\n" + "="*60)
        print("üéØ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê –ì–û–¢–û–í–ê")
        print("="*60)

        print("\nüì° –°–ï–†–í–ò–°–´:")
        print(f"üìä FastAPI Swagger:    http://localhost:{ports['FASTAPI']}/docs")
        print(f"üê∞ RabbitMQ:       http://localhost:{ports['RABBITMQ_UI']}")
        print(f"üóÑÔ∏è PostgreSQL:        localhost:{ports['POSTGRES']}")
        print(f"üì¶ Redis:             localhost:{ports['REDIS']}")

        print("\nüîß –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò:")
        print(f"üîç PgAdmin:           http://localhost:{ports['PGADMIN']}")
        print(f"üìä Redis Commander:    http://localhost:{ports['REDIS_COMMANDER']}")

        print("\nüîë –î–û–°–¢–£–ü–´:")
        print(f"üîç PgAdmin:           {env_vars.get('PGADMIN_DEFAULT_EMAIL', 'admin@admin.com')} / {env_vars.get('PGADMIN_DEFAULT_PASSWORD', 'admin')}")
        print(f"üê∞ RabbitMQ:          {env_vars.get('RABBITMQ_USER', 'guest')} / {env_vars.get('RABBITMQ_PASS', 'guest')}")
        print(f"üóÑÔ∏è PostgreSQL:        {env_vars.get('POSTGRES_USER', 'postgres')} / {env_vars.get('POSTGRES_PASSWORD', 'postgres')}")

        return True
    except DockerDaemonNotRunningError as e:
        print(f"‚ùå {e}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏ Docker Desktop –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –æ–ª—É—Ö.")
        return False
    except DockerContainerConflictError as e:
        print(f"‚ùå {e}")
        print("üí° –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
        print("```")
        print("docker rm -f $(docker ps -aq)")
        print("```")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def test_db_connection():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    """
    print("üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")

    try:
        from app.core.settings import settings
        import asyncpg

        async def test_connection():
            try:
                conn = await asyncpg.connect(
                    user=settings.POSTGRES_USER,
                    password=settings.POSTGRES_PASSWORD.get_secret_value(),
                    host=settings.POSTGRES_HOST,
                    port=settings.POSTGRES_PORT,
                    database='postgres'  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î
                )
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!")
                await conn.close()
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
                return False

        return asyncio.run(test_connection())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def debug_env_vars():
    """
    –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    """
    print("\n" + "="*60)
    print("üîç –û–¢–õ–ê–î–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("="*60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–æ–≤
    env_vars = load_env_vars()
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ .env —Ñ–∞–π–ª–∞:")
    for key in ['POSTGRES_USER', 'POSTGRES_PASSWORD', 'POSTGRES_HOST', 'POSTGRES_PORT', 'POSTGRES_DB']:
        value = env_vars.get(key, '–ù–ï –ù–ê–ô–î–ï–ù–û')
        if 'PASSWORD' in key:
            print(f"   {key}: {'*' * len(str(value)) if value != '–ù–ï –ù–ê–ô–î–ï–ù–û' else value}")
        else:
            print(f"   {key}: {value}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print(f"\nüñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key in ['POSTGRES_USER', 'POSTGRES_PASSWORD', 'POSTGRES_HOST', 'POSTGRES_PORT', 'POSTGRES_DB']:
        value = os.environ.get(key, '–ù–ï –ù–ê–ô–î–ï–ù–û')
        if 'PASSWORD' in key:
            print(f"   {key}: {'*' * len(str(value)) if value != '–ù–ï –ù–ê–ô–î–ï–ù–û' else value}")
        else:
            print(f"   {key}: {value}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–∏—Ç settings
    try:
        from app.core.settings import settings
        print(f"\n‚öôÔ∏è –ß—Ç–æ –≤–∏–¥–∏—Ç Settings:")
        print(f"   POSTGRES_USER: {settings.POSTGRES_USER}")
        print(f"   POSTGRES_PASSWORD: {'*' * len(settings.POSTGRES_PASSWORD.get_secret_value())}")
        print(f"   POSTGRES_HOST: {settings.POSTGRES_HOST}")
        print(f"   POSTGRES_PORT: {settings.POSTGRES_PORT}")
        print(f"   POSTGRES_DB: {settings.POSTGRES_DB}")
        print(f"   DATABASE_URL: {settings.database_url}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ settings: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç PostgreSQL
    real_postgres_port = get_postgres_real_port()
    print(f"\nüê≥ –†–µ–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç PostgreSQL: {real_postgres_port}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PostgreSQL –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(2)
            result = s.connect_ex(('localhost', real_postgres_port))
            if result == 0:
                print(f"‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:{real_postgres_port}")
            else:
                print(f"‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:{real_postgres_port}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL: {e}")

    print("="*60 + "\n")

def setup():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã.

    –í—ã–±–∏—Ä–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:
    - Windows: scripts/setup.ps1 —á–µ—Ä–µ–∑ PowerShell
    - Unix/Linux: scripts/setup.sh —á–µ—Ä–µ–∑ Bash

    Note:
        –°–∫—Ä–∏–ø—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π,
        —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–æ–≤
    """
    system = platform.system()
    if system == "Windows":
        subprocess.run(["powershell", "-File", "scripts/setup.ps1"], check=True)
    else:
        subprocess.run(["bash", "scripts/setup.sh"], check=True)

def activate():
    """
    –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã.

    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:
    - Windows: scripts/activate.ps1 —á–µ—Ä–µ–∑ PowerShell
    - Unix/Linux: scripts/activate.sh —á–µ—Ä–µ–∑ Bash

    Note:
        –û–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ setup() –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    """
    system = platform.system()
    if system == "Windows":
        subprocess.run(["powershell", "-File", "scripts/activate.ps1"], check=True)
    else:
        subprocess.run(["bash", "scripts/activate.sh"], check=True)

def dev(port: Optional[int] = None):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞:
    1. start_infrastructure() - –ø–æ–¥–Ω–∏–º–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    2. find_free_port() - –Ω–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è FastAPI
    3. uvicorn.run() - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å hot reload

    Args:
        port: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è FastAPI. –ï—Å–ª–∏ None - –∞–≤—Ç–æ–ø–æ–∏—Å–∫

    Note:
        –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
        –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å debug –ª–æ–≥–∞–º–∏ –∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
    """

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if not start_infrastructure():
        return

    if port is None:
        port = find_free_port()


    print("\n" + "="*60)
    print("üöÄ –ó–ê–ü–£–°–ö FASTAPI –°–ï–†–í–ï–†–ê")
    print("="*60)
    print(f"üåê –ê–¥—Ä–µ—Å: http://localhost:{port}")
    print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:{port}/docs")
    print(f"üîÑ Hot Reload: –≤–∫–ª—é—á—ë–Ω")
    print("="*60 + "\n")

    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=port,
        reload=True,
        log_level="debug",
        access_log=False
    )

def serve(port: Optional[int] = None):
    """
    –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ dev() –∫–æ–≥–¥–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞
    –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω—è—è. –ó–∞–ø—É—Å–∫–∞–µ—Ç uvicorn —á–µ—Ä–µ–∑ subprocess
    —Å –ø—Ä–æ–¥–∞–∫—à–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (proxy-headers, forwarded-allow-ips).

    Args:
        port: –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞. –ï—Å–ª–∏ None - –∞–≤—Ç–æ–ø–æ–∏—Å–∫

    """
    if port is None:
        port = find_free_port()

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    subprocess.run([
        "uvicorn",
        "app.main:app",
        "--host", "0.0.0.0",
        "--port", str(port),
        "--proxy-headers",
        "--forwarded-allow-ips=*"
    ], check=True)

def migrate():
    """
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Alembic.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É 'alembic upgrade head' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    –≤—Å–µ—Ö –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    –≤ start_infrastructure() –∏ start_all().

    Raises:
        subprocess.CalledProcessError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –º–∏–≥—Ä–∞—Ü–∏–∏

    Note:
        –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ alembic.ini –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ë–î
    """
    subprocess.run(["alembic", "upgrade", "head"], check=True)

def format():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞.

    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç:
    1. black app/ - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∫–æ–¥–∞
    2. isort app/ - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤

    Raises:
        subprocess.CalledProcessError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Note:
        –ò–∑–º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    subprocess.run(["black", "app/"], check=True)
    subprocess.run(["isort", "app/"], check=True)

def check():
    """
    –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ mypy –∏ flake8 —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
    - MyPy: —Ç–∏–ø—ã, –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    - Flake8: –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Å—Ç–∏–ª—å

    Returns:
        bool: True –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ –±–µ–∑ –æ—à–∏–±–æ–∫

    Note:
        –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    """
    mypy_success = True
    flake8_success = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ mypy
    try:
        mypy_result = subprocess.run(
            ["mypy", "app/"],
            capture_output=True,
            text=True,
            check=True
        )
        mypy_errors = mypy_result.stdout.split('\n')

        mypy_error_groups = {
            'error: Incompatible': '–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã',
            'error: Name': '–û—à–∏–±–∫–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è',
            'error: Missing': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã',
            'error: Argument': '–û—à–∏–±–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤',
            'error: Return': '–û—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π'
        }

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        grouped_errors = set()
        for pattern, desc in mypy_error_groups.items():
            matches = [e for e in mypy_errors if pattern in e]
            if matches:
                print(f"\nüîç MyPy - {desc}:")
                for error in matches:
                    print(f"- {error}")
                    grouped_errors.add(error)

        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ "–ü—Ä–æ—á–∏–µ"
        other_errors = [e for e in mypy_errors if e and e not in grouped_errors]
        if other_errors:
            print("\nüîç MyPy - –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏:")
            for error in other_errors:
                print(f"- {error}")
    except subprocess.CalledProcessError as e:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ mypy:")
        print(e.stdout)
        mypy_success = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ flake8
    try:
        result = subprocess.run(
            ["flake8", "app/"],
            capture_output=True,
            text=True,
            check=True
        )
        flake8_errors = result.stdout.split('\n')

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É
        error_groups = {
            'E501': '–î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏',
            'F821': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
            'F841': '–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
            'W605': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            'E262': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'
        }

        # –°–æ–±–∏—Ä–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
        grouped_errors = set()
        for code, desc in error_groups.items():
            matches = [e for e in flake8_errors if code in e]
            if matches:
                print(f"\nüîç Flake8 - {desc}:")
                for error in matches:
                    print(f"- {error.split(':')[0]}")
                    grouped_errors.add(error)

        # –í—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏
        other_errors = [e for e in flake8_errors if e and e not in grouped_errors]
        if other_errors:
            print("\nüîç Flake8 - –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏:")
            for error in other_errors:
                print(f"- {error.split(':')[0]}")

    except subprocess.CalledProcessError as e:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ flake8: ")
        print(e.stdout)
        flake8_success = False

    return mypy_success and flake8_success

def lint():
    """
    –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ª–∏–Ω—Ç–∏–Ω–≥–∞: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ + –ø—Ä–æ–≤–µ—Ä–∫–∞.

    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç format() –∏ check() –¥–ª—è
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞.

    Note:
        –£–¥–æ–±–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–¥–∞ –∫ –∫–æ–º–º–∏—Ç—É
    """
    format()
    check()

def test(
    path: str = "tests/",
    marker: str = None,
    verbose: bool = True,
    output_file: str = None
):
    """
    –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.

    Args:
        path: –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É
        marker: –ú–∞—Ä–∫–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (@pytest.mark.unit –∏ —Ç.–¥.)
        verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        output_file: –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    print("üß™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    if not create_test_database():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return

    env = os.environ.copy()
    env["DEV_ENV_FILE"] = ".env.test"

    cmd = ["pytest", path]

    if verbose:
        cmd.append("-v")

    if marker:
        cmd.extend(["-m", marker])

    cmd.append("--tb=short")  # –ö–æ—Ä–æ—Ç–∫–∏–π traceback

    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: {' '.join(cmd)}")

    try:
        if output_file:
            with open(output_file, "w") as f:
                subprocess.run(cmd, env=env, stdout=f, stderr=subprocess.STDOUT, check=True)
        else:
            subprocess.run(cmd, env=env, check=True)
    except subprocess.CalledProcessError:
        pass

# def create_test_database():
#     """
#     –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è pytest.

#     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.dev, –Ω–æ —Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _test.
#     –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ Docker, —Ç–∞–∫ –∏ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL.

#     Returns:
#         bool: True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
#     """
#     print("üõ†Ô∏è –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
#     db_config = load_env_vars()

#     # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
#     postgres_container = get_postgres_container_name()
#     print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL: {postgres_container}")

#     # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
#     user = db_config.get('POSTGRES_USER', 'postgres')
#     password = db_config.get('POSTGRES_PASSWORD', '')
#     host = db_config.get('POSTGRES_HOST', 'localhost')
#     port = db_config.get('POSTGRES_PORT', '5432')
#     db_name = db_config.get('POSTGRES_DB', 'gidrator_db')
#     test_db_name = f"{db_name}_test"

#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Docker
#         which_docker = subprocess.run(["which", "docker"], capture_output=True)
#         docker_available = which_docker.returncode == 0

#         if docker_available and postgres_container != "postgres":
#             # –ú–µ—Ç–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docker
#             print(f"üê≥ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î —á–µ—Ä–µ–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {postgres_container}")

#             # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
#             subprocess.run(
#                 ["docker", "exec", "-i", postgres_container, "psql", "-U", user, "-c",
#                 f"DROP DATABASE IF EXISTS {test_db_name};"],
#                 capture_output=True, text=True
#             )

#             # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
#             create_cmd = [
#                 "docker", "exec", "-i", postgres_container, "psql", "-U", user, "-c",
#                 f"CREATE DATABASE {test_db_name};"
#             ]
#             result = subprocess.run(create_cmd, capture_output=True, text=True)

#             if result.returncode == 0:
#                 print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {test_db_name} —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!")
#             else:
#                 print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {result.stderr}")
#                 return False
#         else:
#             # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ psql
#             print(f"üîÑ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ psql...")

#             # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
#             psql_command = f"psql -U {user} -h {host} -p {port}"
#             if password:
#                 env = os.environ.copy()
#                 env["PGPASSWORD"] = password
#             else:
#                 env = os.environ.copy()

#             # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
#             drop_cmd = f"{psql_command} -c \"DROP DATABASE IF EXISTS {test_db_name};\""
#             subprocess.run(drop_cmd, shell=True, env=env, capture_output=True)

#             # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
#             create_cmd = f"{psql_command} -c \"CREATE DATABASE {test_db_name};\""
#             result = subprocess.run(create_cmd, shell=True, env=env, capture_output=True, text=True)

#             if result.returncode == 0:
#                 print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {test_db_name} —Å–æ–∑–¥–∞–Ω–∞!")
#             else:
#                 print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î: {result.stderr}")
#                 return False

#         # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
#         test_dsn = f"postgresql://{user}:*******@{host}:{port}/{test_db_name}"
#         print(f"üîÑ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞: {test_dsn}")

#         return True
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
#         return False

import asyncio
import asyncpg
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

async def create_test_database_async():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—è asyncpg (–±–µ–∑ psql).
    """
    print("üõ†Ô∏è –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

    db_config = load_env_vars()

    if not db_config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î")
        return False

    user = db_config.get('POSTGRES_USER', 'postgres')
    password = db_config.get('POSTGRES_PASSWORD', '')
    host = db_config.get('POSTGRES_HOST', 'localhost')
    port = int(db_config.get('POSTGRES_PORT', '5432'))
    db_name = db_config.get('POSTGRES_DB', 'gidrator_db')
    test_db_name = f"{db_name}_test"

    print(f"üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port} –∫–∞–∫ {user}")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres –ë–î –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
        conn = await asyncpg.connect(
            user=user,
            password=password,
            host=host,
            port=port,
            database='postgres'  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î
        )

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
        await conn.execute(f'DROP DATABASE IF EXISTS "{test_db_name}"')
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ë–î {test_db_name} (–µ—Å–ª–∏ –±—ã–ª–∞)")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        await conn.execute(f'CREATE DATABASE "{test_db_name}"')
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {test_db_name} —Å–æ–∑–¥–∞–Ω–∞!")

        await conn.close()

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        test_dsn = f"postgresql://{user}:*******@{host}:{port}/{test_db_name}"
        print(f"üîÑ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞: {test_dsn}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def create_test_database():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    return asyncio.run(create_test_database_async())

def start_all():
    """
    –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: –º–∏–≥—Ä–∞—Ü–∏–∏ + —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ dev() –∫–æ–≥–¥–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ serve().

    Note:
        –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
    """
    migrate()
    serve()

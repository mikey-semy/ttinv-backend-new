"""
Базовый модуль подключений, предоставляющий абстрактные базовые классы для клиентских подключений
и контекстных менеджеров.

Модуль определяет основные классы для обработки подключений в приложении:
- BaseClient: Абстрактный базовый класс для реализации клиентских подключений
- BaseContextManager: Абстрактный базовый класс для реализации контекстных менеджеров подключений

Эти классы обеспечивают единый интерфейс для управления подключениями во всем приложении.
"""

import logging
from abc import ABC, abstractmethod
from typing import Any, Optional


class BaseClient(ABC):
    """
    Базовый класс для всех клиентов

    Абстрактный базовый класс, определяющий интерфейс для клиентских подключений.
    Предоставляет базовую функциональность управления подключениями с возможностями логирования.

    Attributes:
        _client (Optional[Any]): Экземпляр клиентского подключения
        logger (logging.Logger): Экземпляр логгера для класса клиента
    """

    def __init__(self) -> None:
        self._client: Optional[Any] = None
        self.logger = logging.getLogger(self.__class__.__name__)

    @abstractmethod
    async def connect(self) -> Any:
        """
        Создает подключение

        Устанавливает подключение к целевому сервису или ресурсу.

        Returns:
            Any: Экземпляр подключенного клиента

        Raises:
            NotImplementedError: Когда метод не реализован в подклассе
        """
        pass

    @abstractmethod
    async def close(self) -> None:
        """
        Закрывает подключение

        Закрывает активное подключение и выполняет необходимую очистку.

        Raises:
            NotImplementedError: Когда метод не реализован в подклассе
        """
        pass


class BaseContextManager(ABC):
    """
    Базовый контекстный менеджер

    Абстрактный базовый класс, реализующий протокол асинхронного контекстного менеджера
    для управления подключениями. Обеспечивает автоматическое управление подключениями
    внутри асинхронных контекстных блоков.

    Attributes:
        _client (Optional[Any]): Экземпляр клиентского подключения
        logger (logging.Logger): Экземпляр логгера для класса контекстного менеджера
    """

    def __init__(self) -> None:
        self._client = None
        self.logger = logging.getLogger(self.__class__.__name__)

    @abstractmethod
    async def connect(self) -> Any:
        """
        Создает подключение

        Устанавливает подключение к целевому сервису или ресурсу.

        Returns:
            Any: Экземпляр подключенного клиента

        Raises:
            NotImplementedError: Когда метод не реализован в подклассе
        """
        pass

    @abstractmethod
    async def close(self) -> None:
        """
        Закрывает подключение

        Закрывает активное подключение и выполняет необходимую очистку.

        Raises:
            NotImplementedError: Когда метод не реализован в подклассе
        """
        pass

    async def __aenter__(self):
        """
        Точка входа асинхронного контекстного менеджера.

        Автоматически устанавливает подключение при входе в контекст.

        Returns:
            Any: Экземпляр подключенного клиента
        """
        return await self.connect()

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """
        Точка выхода асинхронного контекстного менеджера.

        Автоматически закрывает подключение при выходе из контекста,
        независимо от того, произошло ли исключение.

        Args:
            exc_type: Тип исключения, если оно произошло
            exc_val: Экземпляр исключения, если оно произошло
            exc_tb: Трейсбек исключения, если оно произошло
        """
        await self.close()
